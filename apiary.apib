HOST: http://huntjs.herokuapp.com/

--- Embedded routes for authorization strategies ---


-- Default redirect routes

Success authorization. By default, if user present, it sets flash.success message of `Welcome to our site, Username!` and redirects to /. This route can be redefined by https://huntjs.herokuapp.com/documentation/Hunt.html#extendRoutes
GET /auth/success
< 302


Failure authorization. By default, if not present,  it sets flash.error message of `Authorization failed!` and redirects to /. This route can be redefined by https://huntjs.herokuapp.com/documentation/Hunt.html#extendRoutes
GET /auth/failure
< 302


-- User authorization API via local strategy


Authorize via Username/email and password
POST /auth/login
> Content-Type: application/json; charset=utf-8
{ "username": "myLogin", "password":"myPassword"}
< 302
< Location: /auth/success
+++++
< 302
< Location: /auth/failure


Check, that email is not in use
POST /auth/isBusy
> Content-Type: application/json; charset=utf-8
{ "email": "myemail@example.org"}
< 200
< Content-Type: application/json; charset=utf-8
{ "isBusy":true }
+++++
< 200
< Content-Type: application/json; charset=utf-8
{ "isBusy":false }


SignUp via email and password
POST /auth/signup
> Content-Type: application/json; charset=utf-8
{ "email": "myemail@example.org", "password":"myPassword"}
< 302
< Location: /auth/success
+++++
< 302
< Location: /auth/failure
+++++
< 400



-- User authorization API via Facebook Passport.js strategy --

Authorization
GET /auth/facebook
< 302


Callback for authorization
GET /auth/facebook/callback
< 302


-- User authorization API via Github oAuth Passport.js strategy --

Authorization. Tokens can be acquired here - https://github.com/settings/applications
GET /auth/github
< 302


Callback for authorization
GET /auth/github/callback
< 302


-- User authorization API via Google OpenId Passport.js strategy --

Authorization
GET /auth/google
< 302


Callback for authorization
GET /auth/google/callback
< 302



-- User authorization API via Intuit OpenId Passport.js strategy --

Authorization
GET /auth/intuit
< 302


Callback for authorization
GET /auth/intuit/callback
< 302


-- User authorization API via Paypal OpenId Passport.js strategy --

Authorization
GET /auth/paypal
< 302


Callback for authorization
GET /auth/paypal/callback
< 302


-- User authorization API via Steam OpenId Passport.js strategy --

Authorization
GET /auth/steam
< 302


Callback for authorization
GET /auth/steam/callback
< 302


-- User authorization API via Twitter oAuth Passport.js strategy --

Authorization. Tokens can be acquired here - https://dev.twitter.com/
GET /auth/steam
< 302


Callback for authorization
GET /auth/steam/callback
< 302


-- User authorization API via Vk.com oAuth Passport.js strategy --

Authorization. Tokens can be acquired here - https://vk.com/dev
GET /auth/vk
< 302


Callback for authorization
GET /auth/vk/callback
< 302


-- User authorization API via Yahoo OpenID strategy --

Authorization
GET /auth/yahoo
< 302


Callback for authorization
GET /auth/yahoo/callback
< 302


-- User authorization API via Facebook oAuth Passport.js strategy --

Authorization. Tokens can be acquired here - https://developers.facebook.com/
GET /auth/facebook
< 302


Callback for authorization
GET /auth/facebook/callback
< 302


-- Exported REST api for trophies (from example application)


List all trophies
GET /api/v1/trophy
< 200
< Content-Type: application/json; charset=utf-8
{
    "status": "Ok",
    "data": [
        {
            "id": "540df2392b99869ffb00004b",
            "name": "Anna Goncalves",
            "scored": false,
            "priority": 0
        },
        {
            "id": "540df21a2b9986796e000074",
            "name": "Billy Sole",
            "scored": true,
            "priority": 6
        },
        {
            "id": "540df1ed2b9986796e000069",
            "name": "George Dillon",
            "scored": true,
            "priority": 9
        },
        {
            "id": "540df1bb2b99862276000054",
            "name": "Rick Hawkins",
            "scored": true,
            "priority": 8
        },
        {
            "id": "540df10a2b99869186000043",
            "name": "Blain Cooper",
            "scored": true,
            "priority": 8
        },
        {
            "id": "540df0b82b9986c9b8000042",
            "name": "Alan Schaefer",
            "scored": false,
            "priority": 10
        }
    ],
    "metadata": {
        "modelName": "Trophy",
        "fieldsAccessible": [
            "id",
            "name",
            "scored",
            "priority"
        ],
        "page": 1,
        "itemsPerPage": 10,
        "numberOfPages": 1,
        "count": 6,
        "sort":"_id",
        "filter":{ }
    }
}


Filter all trophies to be scored
GET /api/v1/trophy?scored=false
< 200
< Content-Type: application/json; charset=utf-8
{
    "status": "Ok",
    "metadata": {
        "modelName": "Trophy",
        "fieldsAccessible": [
            "id",
            "name",
            "scored",
            "priority"
        ],
        "page": 1,
        "itemsPerPage": 10,
        "numberOfPages": 1,
        "count": 2,
        "sort":"_id",
        "filter":{ "scored":true }
    },
    "data": [
        {
            "id": "540df2392b99869ffb00004b",
            "name": "Anna Goncalves",
            "scored": false,
            "priority": 0
        },
        {
            "id": "540df0b82b9986c9b8000042",
            "name": "Alan Schaefer",
            "scored": false,
            "priority": 10
        }
    ]
}


List one trophy
GET /api/v1/trophy/540df2392b99869ffb00004b
< 200
< Content-Type: application/json; charset=utf-8
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}
+++++
< 404
< Content-Type: application/json; charset=utf-8
{
    "status":"Error",
    "errors":[
        {
            "code":404,
            "message":"Not found!"
        }
    ]
}


Create trophy
POST /api/v1/trophy
> Content-Type: application/json; charset=utf-8
{
    "name":"Anna Goncalves",
    "scored":false,
    "priority":0
}
< 201
< Content-Type: application/json; charset=utf-8
< Location: /api/v1/trophy/540df2392b99869ffb00004b
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}


Update one trophy via POST request (default angular $resource $save behaviour)
POST /api/v1/trophy
> Content-Type: application/json; charset=utf-8
{
    "id": "540df2392b99869ffb00004b",
    "name":"Anna Goncalves",
    "scored":false,
    "priority":0
}
< 200
< Content-Type: application/json; charset=utf-8
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}
+++++
< 404
< Content-Type: application/json; charset=utf-8
{
    "status":"Error",
    "errors":[
        {
            "code":404,
            "message":"Not found!"
        }
    ]
}


Update one trophy via PUT request (default REST behaviour)
PUT /api/v1/trophy/540df2392b99869ffb00004b
> Content-Type: application/json; charset=utf-8
{
    "name":"Anna Goncalves",
    "scored":false,
    "priority":0
}
< 200
< Content-Type: application/json; charset=utf-8
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}
+++++
< 404
< Content-Type: application/json; charset=utf-8
{
    "status":"Error",
    "errors":[
        {
            "code":404,
            "message":"Not found!"
        }
    ]
}


Delete trophy
DELETE /api/v1/trophy/540df2392b99869ffb00004b
< 200
{
    "status": "deleted"
}