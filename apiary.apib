FORMAT: 1A
HOST: http://huntjs.herokuapp.com/

# Group Authorization result endpoints
Endpoints used for authorization. Mainly they are not single page application compatible.
Because the oAuth ones do 302 redirects to other domain, and this domain makes redirects back.

### GET /auth/success?strategy={strategy}
Catch all authorization success endpoint. Redirects to main page. Can be overloaded.

+ Parameters

    + strategy (string) ... strategy being used - `local`,`facebook`,`google`,`twitter`.

+ Response 302

    + Headers

            Location: /

### GET /auth/failure?strategy={strategy}
Catch all authorization failure endpoint. Redirects to default login page. Can be overloaded.

+ Parameters

    + strategy (string) ... strategy being used - `local`,`facebook`,`google`,`twitter`.

+ Response 302

    + Headers

            Location: /auth/login


# Group Google+ oAuth authorization

### GET /auth/google
Perform authorization by means of Google OAuth. This endpoint redirects to Google+ authorization page.

+ Response 302


### GET /auth/google/callback
Perform authorization by means of Google OAuth. This endpoint receives redirect from Google+ authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=google


# Group Facebook oAuth authorization

### GET /auth/facebook
Perform authorization by means of Facebook OAuth. This endpoint redirects to Facebook authorization page.

+ Response 302

### GET /auth/facebook
Perform authorization by means of Facebook OAuth. This endpoint receives redirect from Facebook authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=facebook


# Group Twitter oAuth authorization

### GET /auth/twitter
Perform authorization by means of Twitter OAuth. This endpoint redirects to Twitter authorization page.

+ Response 302

### GET /auth/twitter
Perform authorization by means of Twitter OAuth. This endpoint receives redirect from Twitter authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=twitter


# Group Steam OpenId authorization

### GET /auth/steam
Perform authorization by means of Steam OpenId. This endpoint redirects to Steam OpenId authorization page.

+ Response 302

### GET /auth/steam
Perform authorization by means of Steam OpenIdh. This endpoint receives redirect from Steam OpenId authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=steam


# Group Local strategy authorization

### POST /auth/signup
Perform creating user account by email and password.
Email with account confirmation is send.

+ Request (application/x-www-form-urlencoded)

            email=myLogin@mydomain.com&password=myPassword"

+ Response 302

    + Headers

            Location: /auth/success?strategy=local


+ Request (application/json)

            {"email":"myLogin@mydomain.com","password":"myPassword"}

+ Response 201

            {
              "code":201,
              "status":"Created",
              "user":{
                "id": "53b43aded6202872e0e3371f",
                "huntKey": "2a93d8a26ad54f6cfc9151ea9919c8c56f944c6dd32ce0260f4cdbbc56d5f82777ed286c1686e6dcfbda60ae16c72c040a473b64991161bb1943e536962658cd"
              },
              "message":"Thanks for signing up! Please, verify your email by following link in it!"
            }


### GET /auth/confirm/{welcomeLink}
Confirm email address of user. After following link user will be authorized, if he/she hadn't performed it before.

+ Parameters

    + welcomeLink (string) ... Server-generated unique string.

+ Response 302

    + Headers

            Location: /auth/success?strategy=local


# Group Reset account password using email

### POST /auth/restoreAccount
Ask for email with link to reset password. To make spammers happy, this function ***always***
behaves like the email address is accepted. But it complains on malformed emails.

+ Request (application/x-www-form-urlencoded)

        email=myLogin@mydomain.com


+ Response 302

    + Headers

            Location: /

+ Request (application/json)

        {
            "email":"myLogin@mydomain.com",
        }

+ Response 201

        {
          "code":201,
          "status":"Created",
          "message":"Check your email address, we have send you instructions for restoring account"
        }


### GET /auth/reset/{resetLink}
Render page to reset password for user, who followed link in email address.
If link is not found, return 404 page.

+ Parameters

    + resetLink (string) ... Server-generated unique string.

+ Response 200

+ Response 404

### POST /auth/resetPassword
Resets password using code

+ Request (application/json)

        {
          "reset": "2a93d8a26ad54f6cfc9151ea9919c8c56f944c6dd32ce0260f4cdbbc56d5f82777ed286c1686e6dcfbda60ae16c72c040a473b64991161bb1943e536962658cd",
          "password": "I_forgot_my_password"
        }

+ Response 200

        {
          "code": 200,
          "status": "Ok",
          "message": "Thanks! Your password is reset!"
        }


+ Request (application/x-www-form-urlencoded)

        reset=2943e536962658cd&password=I_forgot_my_password

+ Response 302

    + Headers

            Location: /



## Resource Logout [/auth/logout]
### GET
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### POST
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### PUT
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### DELETE
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### PATCH
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local


## Resource  Authorization login page [/auth/login]

Perform authorization by username(email) and password

+ Request (application/x-www-form-urlencoded)

        {
            "username":"myLogin",
            "password":"myPassword"
        }

+ Response 302

    + Headers

            Location: /auth/success?strategy=local

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### GET
Static login page with different authorization options

+ Response 200 (text/html)

### POST
Perform authorization by username(email) and password

+ Request (application/x-www-form-urlencoded)

        {
            "username":"myLogin",
            "password":"myPassword"
        }

+ Response 302

    + Headers

            Location: /auth/success?strategy=local




# Group Exported REST api for trophies (from example application)


List all trophies
GET /api/v1/trophy
< 200
< Content-Type: application/json; charset=utf-8
{
    "status": "Ok",
    "data": [
        {
            "id": "540df2392b99869ffb00004b",
            "name": "Anna Goncalves",
            "scored": false,
            "priority": 0
        },
        {
            "id": "540df21a2b9986796e000074",
            "name": "Billy Sole",
            "scored": true,
            "priority": 6
        },
        {
            "id": "540df1ed2b9986796e000069",
            "name": "George Dillon",
            "scored": true,
            "priority": 9
        },
        {
            "id": "540df1bb2b99862276000054",
            "name": "Rick Hawkins",
            "scored": true,
            "priority": 8
        },
        {
            "id": "540df10a2b99869186000043",
            "name": "Blain Cooper",
            "scored": true,
            "priority": 8
        },
        {
            "id": "540df0b82b9986c9b8000042",
            "name": "Alan Schaefer",
            "scored": false,
            "priority": 10
        }
    ],
    "metadata": {
        "modelName": "Trophy",
        "fieldsAccessible": [
            "id",
            "name",
            "scored",
            "priority"
        ],
        "page": 1,
        "itemsPerPage": 10,
        "numberOfPages": 1,
        "count": 6,
        "sort":"_id",
        "filter":{ }
    }
}


Filter all trophies to be scored
GET /api/v1/trophy?scored=false
< 200
< Content-Type: application/json; charset=utf-8
{
    "status": "Ok",
    "metadata": {
        "modelName": "Trophy",
        "fieldsAccessible": [
            "id",
            "name",
            "scored",
            "priority"
        ],
        "page": 1,
        "itemsPerPage": 10,
        "numberOfPages": 1,
        "count": 2,
        "sort":"_id",
        "filter":{ "scored":true }
    },
    "data": [
        {
            "id": "540df2392b99869ffb00004b",
            "name": "Anna Goncalves",
            "scored": false,
            "priority": 0
        },
        {
            "id": "540df0b82b9986c9b8000042",
            "name": "Alan Schaefer",
            "scored": false,
            "priority": 10
        }
    ]
}


List one trophy
GET /api/v1/trophy/540df2392b99869ffb00004b
< 200
< Content-Type: application/json; charset=utf-8
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}
+++++
< 404
< Content-Type: application/json; charset=utf-8
{
    "status":"Error",
    "errors":[
        {
            "code":404,
            "message":"Not found!"
        }
    ]
}


Create trophy
POST /api/v1/trophy
> Content-Type: application/json; charset=utf-8
{
    "name":"Anna Goncalves",
    "scored":false,
    "priority":0
}
< 201
< Content-Type: application/json; charset=utf-8
< Location: /api/v1/trophy/540df2392b99869ffb00004b
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}


Update one trophy via POST request (default angular $resource $save behaviour)
POST /api/v1/trophy
> Content-Type: application/json; charset=utf-8
{
    "id": "540df2392b99869ffb00004b",
    "name":"Anna Goncalves",
    "scored":false,
    "priority":0
}
< 200
< Content-Type: application/json; charset=utf-8
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}
+++++
< 404
< Content-Type: application/json; charset=utf-8
{
    "status":"Error",
    "errors":[
        {
            "code":404,
            "message":"Not found!"
        }
    ]
}


Update one trophy via PUT request (default REST behaviour)
PUT /api/v1/trophy/540df2392b99869ffb00004b
> Content-Type: application/json; charset=utf-8
{
    "name":"Anna Goncalves",
    "scored":false,
    "priority":0
}
< 200
< Content-Type: application/json; charset=utf-8
{
    "status":"Ok",
    "data": {
        "id":"540df2392b99869ffb00004b",
        "name":"Anna Goncalves",
        "scored":false,
        "priority":0
    }
}
+++++
< 404
< Content-Type: application/json; charset=utf-8
{
    "status":"Error",
    "errors":[
        {
            "code":404,
            "message":"Not found!"
        }
    ]
}


Delete trophy
DELETE /api/v1/trophy/540df2392b99869ffb00004b
< 200
{
    "status": "deleted"
}