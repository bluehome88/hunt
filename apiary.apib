FORMAT: 1A
HOST: http://huntjs.herokuapp.com/

# Huntjs
Documentation on authorization API and exported models.

# Group Authorization result endpoints
Endpoints used for authorization. Mainly they are not single page application compatible.
Because the oAuth ones do 302 redirects to other domain, and this domain makes redirects back.

### GET /auth/success?strategy={strategy}
Catch all authorization success endpoint. Redirects to main page. Can be overloaded.

+ Parameters

    + strategy (string) ... strategy being used - `local`,`facebook`,`google`,`twitter`.

+ Response 302

    + Headers

            Location: /

### GET /auth/failure?strategy={strategy}
Catch all authorization failure endpoint. Redirects to default login page. Can be overloaded.

+ Parameters

    + strategy (string) ... strategy being used - `local`,`facebook`,`google`,`twitter`.

+ Response 302

    + Headers

            Location: /auth/login


# Group Google+ oAuth authorization

### GET /auth/google
Perform authorization by means of Google OAuth. This endpoint redirects to Google+ authorization page.

+ Response 302


### GET /auth/google/callback
Perform authorization by means of Google OAuth. This endpoint receives redirect from Google+ authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=google


# Group Facebook oAuth authorization

### GET /auth/facebook
Perform authorization by means of Facebook OAuth. This endpoint redirects to Facebook authorization page.

+ Response 302

### GET /auth/facebook/callback
Perform authorization by means of Facebook OAuth. This endpoint receives redirect from Facebook authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=facebook


# Group Twitter oAuth authorization

### GET /auth/twitter
Perform authorization by means of Twitter OAuth. This endpoint redirects to Twitter authorization page.

+ Response 302

### GET /auth/twitter/callback
Perform authorization by means of Twitter OAuth. This endpoint receives redirect from Twitter authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=twitter


# Group Steam OpenId authorization

### GET /auth/steam
Perform authorization by means of Steam OpenId. This endpoint redirects to Steam OpenId authorization page.

+ Response 302

### GET /auth/steam/callback
Perform authorization by means of Steam OpenIdh. This endpoint receives redirect from Steam OpenId authorization page.

+ Response 302

    + Headers

            Location: /auth/success?strategy=steam


# Group Local strategy authorization

### POST /auth/signup
Perform creating user account by email and password.
Email with account confirmation is send.

+ Request (application/x-www-form-urlencoded)

            email=myLogin@mydomain.com&password=myPassword"

+ Response 302

    + Headers

            Location: /auth/success?strategy=local


+ Request (application/json)

            {"email":"myLogin@mydomain.com","password":"myPassword"}

+ Response 201

            {
              "code":201,
              "status":"Created",
              "user":{
                "id": "53b43aded6202872e0e3371f",
                "huntKey": "2a93d8a26ad54f6cfc9151ea9919c8c56f944c6dd32ce0260f4cdbbc56d5f82777ed286c1686e6dcfbda60ae16c72c040a473b64991161bb1943e536962658cd"
              },
              "message":"Thanks for signing up! Please, verify your email by following link in it!"
            }


### GET /auth/confirm/{welcomeLink}
Confirm email address of user. After following link user will be authorized, if he/she hadn't performed it before.

+ Parameters

    + welcomeLink (string) ... Server-generated unique string.

+ Response 302

    + Headers

            Location: /auth/success?strategy=local


# Group Reset account password using email

### POST /auth/restoreAccount
Ask for email with link to reset password. To make spammers happy, this function ***always***
behaves like the email address is accepted. But it complains on malformed emails.

+ Request (application/x-www-form-urlencoded)

        email=myLogin@mydomain.com


+ Response 302

    + Headers

            Location: /

+ Request (application/json)

        {
            "email":"myLogin@mydomain.com",
        }

+ Response 201

        {
          "code":201,
          "status":"Created",
          "message":"Check your email address, we have send you instructions for restoring account"
        }


### GET /auth/reset/{resetLink}
Render page to reset password for user, who followed link in email address.
If link is not found, return 404 page.

+ Parameters

    + resetLink (string) ... Server-generated unique string.

+ Response 200

+ Response 404

### POST /auth/resetPassword
Resets password using code

+ Request (application/json)

        {
          "reset": "2a93d8a26ad54f6cfc9151ea9919c8c56f944c6dd32ce0260f4cdbbc56d5f82777ed286c1686e6dcfbda60ae16c72c040a473b64991161bb1943e536962658cd",
          "password": "I_forgot_my_password"
        }

+ Response 200

        {
          "code": 200,
          "status": "Ok",
          "message": "Thanks! Your password is reset!"
        }


+ Request (application/x-www-form-urlencoded)

        reset=2943e536962658cd&password=I_forgot_my_password

+ Response 302

    + Headers

            Location: /



## Resource Logout [/auth/logout]
### GET
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### POST
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### PUT
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### DELETE
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### PATCH
Performing logout - clearing session, revoking authorization for current user.

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local


## Resource  Authorization login page [/auth/login]

Perform authorization by username(email) and password

+ Request (application/x-www-form-urlencoded)

        {
            "username":"myLogin",
            "password":"myPassword"
        }

+ Response 302

    + Headers

            Location: /auth/success?strategy=local

+ Response 302

    + Headers

            Location: /auth/failure?strategy=local

### GET
Static login page with different authorization options

+ Response 200 (text/html)

### POST
Perform authorization by username(email) and password

+ Request (application/x-www-form-urlencoded)

        {
            "username":"myLogin",
            "password":"myPassword"
        }

+ Response 302

    + Headers

            Location: /auth/success?strategy=local

+ Request (application/json)

        {
            "username":"myLogin",
            "password":"myPassword"
        }

+ Response 200
+ Response 403
+ Response 404




# Group Exported REST api for trophies from example application

## Resource Trophies collection [/api/v1/trophy]

### GET
List all trophies

+ Response 200 (application/json; charset=utf-8)

            {
                "status": "Ok",
                "data": [
                    {
                        "id": "540df2392b99869ffb00004b",
                        "name": "Anna Goncalves",
                        "scored": false,
                        "priority": 0
                    },
                    {
                        "id": "540df21a2b9986796e000074",
                        "name": "Billy Sole",
                        "scored": true,
                        "priority": 6
                    },
                    {
                        "id": "540df1ed2b9986796e000069",
                        "name": "George Dillon",
                        "scored": true,
                        "priority": 9
                    },
                    {
                        "id": "540df1bb2b99862276000054",
                        "name": "Rick Hawkins",
                        "scored": true,
                        "priority": 8
                    },
                    {
                        "id": "540df10a2b99869186000043",
                        "name": "Blain Cooper",
                        "scored": true,
                        "priority": 8
                    },
                    {
                        "id": "540df0b82b9986c9b8000042",
                        "name": "Alan Schaefer",
                        "scored": false,
                        "priority": 10
                    }
                ],
                "metadata": {
                    "modelName": "Trophy",
                    "fieldsAccessible": [
                        "id",
                        "name",
                        "scored",
                        "priority"
                    ],
                    "page": 1,
                    "itemsPerPage": 10,
                    "numberOfPages": 1,
                    "count": 6,
                    "sort":"_id",
                    "filter":{ }
                }
            }

### POST
Create trophy

+ Request  (application/json)

        {
            "name":"Anna Goncalves",
            "scored":false,
            "priority":0
        }

+ Response 201

    + Headers

            Location: /api/v1/trophy/557caf8ee7c36e8011b92ea7

    + Body

            {
              "status": "Created",
              "code": 201,
              "location": "/api/v1/trophy/557caf8ee7c36e8011b92ea7",
              "id": "557caf8ee7c36e8011b92ea7"
            }


+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }


+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


## Resource Trophy entity [/api/v1/trophy/{trophyId}]

+ Parameters

    + trophyId (string) ... Server-generated unique string.

### GET
List one trophy

+ Response 200

            {
              "status": "Ok",
              "code": 200,
              "metadata": {
                "modelName": "Trophy",
                "canRead": true,
                "fieldsReadable": [
                  "id",
                  "name",
                  "scored",
                  "priority",
                  "$subscribeToken",
                  "author"
                ],
                "canWrite": true,
                "fieldsWritable": [
                  "name",
                  "scored",
                  "priority"
                ],
                "canDelete": false
              },
              "data": {
                "id": "557caf8ee7c36e8011b92ea7",
                "name": "Alan Schaefer",
                "scored": false,
                "priority": 10,
                "$subscribeToken": "Trophy_557caf8ee7c36e8011b92ea7_fa11c3cf77f04363a45050484bd2caae",
                "author": {
                  "id": "55b0c81ee523c6a60c4325ad",
                  "name": {},
                  "displayName": "Gamemaster",
                  "gravatar": "https://secure.gravatar.com/avatar/0e8ddc2770e6eebc8ac5053f3d873ae5.jpg?s=80&d=wavatar&r=g",
                  "gravatar30": "https://secure.gravatar.com/avatar/0e8ddc2770e6eebc8ac5053f3d873ae5.jpg?s=30&d=wavatar&r=g",
                  "gravatar50": "https://secure.gravatar.com/avatar/0e8ddc2770e6eebc8ac5053f3d873ae5.jpg?s=50&d=wavatar&r=g",
                  "gravatar80": "https://secure.gravatar.com/avatar/0e8ddc2770e6eebc8ac5053f3d873ae5.jpg?s=80&d=wavatar&r=g",
                  "gravatar100": "https://secure.gravatar.com/avatar/0e8ddc2770e6eebc8ac5053f3d873ae5.jpg?s=100&d=wavatar&r=g",
                  "isBanned": false,
                  "root": false,
                  "online": false
                }
              }
            }


+ Response 401

            {
              "status": "Error",
              "code": 403,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


+ Response 404

            {
              "status": "Error",
              "code": 404,
              "message": "Not Found"
            }

### POST
Create trophy with id defined.

+ Request  (application/json)

        {
            "id":"557caf8ee7c36e8011b92ea7",
            "name":"Anna Goncalves",
            "scored":false,
            "priority":0
        }

+ Response 201

    + Headers

            Location: /api/v1/trophy/557caf8ee7c36e8011b92ea7

    + Body

            {
              "status": "Created",
              "code": 201,
              "location": "/api/v1/trophy/557caf8ee7c36e8011b92ea7",
              "id": "557caf8ee7c36e8011b92ea7"
            }

+ Response 400

            {
              "status": "Error",
              "code": 400,
              "message": "Bad Request",
              "validationErrors": [
                {
                  "message": "Path `name` is required.",
                  "field": "name"
                }
              ]
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }

+ Response 409

            {
              "status": "Error",
              "code": 409,
              "message": "Conflict"
            }


### PATCH
Update trophy. Patch behaviour is used - if the setter field is undefined, the previous values are used.

+ Request  (application/json)

        {
            "priority": 11
        }

+ Response 200 (application/json)

            {
              "status": "Updated",
              "code": 200,
              "patch": {
                "priority": {
                  "new": "11",
                  "old": 10
                }
              }
            }

+ Response 400

            {
              "status": "Error",
              "code": 400,
              "message": "Bad Request",
              "validationErrors": [
                {
                  "message": "Path `name` is required.",
                  "field": "name"
                }
              ]
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


+ Response 404

            {
              "status": "Error",
              "code": 404,
              "message": "Not Found"
            }


### PUT
Update trophy. Put behaviour is used - all fields updated with values given and the undefined ones - with undefined values.

+ Request  (application/json)

        {
            "name": "Anna"
        }

+ Response 200

            {
              "status": "Updated",
              "code": 200,
              "patch": {
                "name": {
                  "new": "Anna",
                  "old": "Anna Goncalves"
                },
                "scored": {
                  "old": false
                },
                "priority": {
                  "old": 10
                }
              }
            }

+ Response 400

            {
              "status": "Error",
              "code": 400,
              "message": "Bad Request",
              "validationErrors": [
                {
                  "message": "Path `name` is required.",
                  "field": "name"
                }
              ]
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


+ Response 404

            {
              "status": "Error",
              "code": 404,
              "message": "Not Found"
            }


### DELETE
Delete trophy

+ Response 200

             {
               "code": 200,
               "status": "Deleted"
             }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


+ Response 404

            {
              "status": "Error",
              "code": 404,
              "message": "Not Found"
            }

# Group Users API

## Resource Users' collection [/api/v1/user]

### GET
List all users, filtering can be applied

+ Response 200

            {
              "metadata": {
                "modelName": "User",
                "fieldsReadable": [
                  "_id",
                  "id",
                  "accountVerified",
                  "lastSeenOnline",
                  "name",
                  "familyName",
                  "middleName",
                  "givenName",
                  "displayName",
                  "roles",
                  "root",
                  "isBanned",
                  "$subscribeToken",
                  "isOnline",
                  "lastSeenOnlineAgo",
                  "lastSeenOnline"
                ],
                "filter": {
                  "accountVerified": true
                },
                "page": 1,
                "sort": "-_id",
                "itemsPerPage": 10,
                "numberOfPages": 1,
                "count": 1
              },
              "data": [
                {
                  "_id": "55b0c81ee523c6a60c4325ad",
                  "id": "55b0c81ee523c6a60c4325ad",
                  "accountVerified": true,
                  "name": {},
                  "familyName": null,
                  "middleName": null,
                  "givenName": null,
                  "displayName": "Gamemaster",
                  "root": false,
                  "isBanned": false,
                  "$subscribeToken": "User_55b0c81ee523c6a60c4325ad_8565313eb2bc0eb297ca7105a36117ca",
                  "isOnline": false,
                  "lastSeenOnlineAgo": 315360000000
                }
              ],
              "code": 200,
              "status": "Ok"
            }

+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }

### POST
Create user account, only usable to `root` users.

+ Request (application/json)

            {
              "email":"somebody@example.org",
              "huntKey":""
            }

+ Response 201

    + Headers

            Location: /api/v1/user/557caf8ee7c36e8011b92ea7

    + Body

            {
              "status": "Created",
              "code": 201,
              "location": "/api/v1/user/557caf8ee7c36e8011b92ea7",
              "id": "557caf8ee7c36e8011b92ea7"
            }


+ Response 400

            {
              "status": "Error",
              "code": 400,
              "message": "Bad Request",
              "validationErrors": [
                {
                  "message": "Path `huntKey` is required.",
                  "field": "huntKey"
                }
              ]
            }

+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


## Resource User's entity [/api/v1/user/{userId}]

+ Parameters

    + userId (string) ... Server-generated unique string.

### GET
List one user

+ Response 200

            {
              "status": "Ok",
              "code": 200,
              "metadata": {
                "modelName": "User",
                "canRead": true,
                "fieldsReadable": [
                  "_id",
                  "id",
                  "accountVerified",
                  "lastSeenOnline",
                  "name",
                  "familyName",
                  "middleName",
                  "givenName",
                  "displayName",
                  "roles",
                  "root",
                  "isBanned",
                  "$subscribeToken",
                  "isOnline",
                  "lastSeenOnlineAgo",
                  "lastSeenOnline"
                ],
                "canWrite": false,
                "fieldsWritable": [],
                "canDelete": false
              },
              "data": {
                "_id": "55b0c81ee523c6a60c4325ad",
                "id": "55b0c81ee523c6a60c4325ad",
                "accountVerified": true,
                "name": {},
                "familyName": null,
                "middleName": null,
                "givenName": null,
                "displayName": "Gamemaster",
                "root": false,
                "isBanned": false,
                "$subscribeToken": "User_55b0c81ee523c6a60c4325ad_8565313eb2bc0eb297ca7105a36117ca",
                "isOnline": false,
                "lastSeenOnlineAgo": 315360000000
              }
            }

+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }

### POST
Create user with predefined id. Only usable by `root` users

+ Request (application/json)

            {
              "id":"557caf8ee7c36e8011b92ea7",
              "email":"somebody@example.org",
              "huntKey":""
            }

+ Response 201

    + Headers

            Location: /api/v1/user/557caf8ee7c36e8011b92ea7

    + Body

            {
              "status": "Created",
              "code": 201,
              "location": "/api/v1/user/557caf8ee7c36e8011b92ea7",
              "id": "557caf8ee7c36e8011b92ea7"
            }


+ Response 400

            {
              "status": "Error",
              "code": 400,
              "message": "Bad Request",
              "validationErrors": [
                {
                  "message": "Path `huntKey` is required.",
                  "field": "huntKey"
                }
              ]
            }

+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }

+ Response 409

            {
              "status": "Error",
              "code": 409,
              "message": "Conflict"
            }

### PUT
Update user. Put behaviour is used - all fields updated with values given and the undefined ones - with undefined values.

+ Request  (application/json)

        {
          "displayName":"myDisplayName",
          "familyName":"myFamilyName",
          "middleName":"myMiddleName",
          "givenName":"myGivenName",
          "password":"12345678",
          "email":"myEmail@example.org",
        }

+ Response 200

        {
          "status": "Updated",
          "code": 200,
          "patch": {
            "displayName": {
              "new":"myDisplayName",
              "old": "ostroumov095"
            },
            "familyName": {
              "new":"myFamilyName",
              "old": null
            },
            "middleName": {
              "new":"myMiddleName",
              "old": null
            },
            "givenName": {
              "new":"myGivenName",
              "old": null
            },
            "password": {
              "new": "lalala"
            },
            "email": {
              "new":"myEmail@example.org",
              "old": "ostroumov095@gmail.com"
            }
          }
        }

+ Response 400

            {
              "status": "Error",
              "code": 400,
              "message": "Bad Request",
              "validationErrors": [
                {
                  "message": "Path `name` is required.",
                  "field": "name"
                }
              ]
            }

+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


+ Response 404

            {
              "status": "Error",
              "code": 404,
              "message": "Not Found"
            }

### PATCH
Update user. Patch behaviour is used - if the setter field is undefined, the previous values are used.

+ Request  (application/json)

        {
          "password":"12345678"
        }

+ Response 200

        {
          "status": "Updated",
          "code": 200,
          "patch": {
            "password": {
              "new": "lalala"
            }
          }
        }

+ Response 400

            {
              "status": "Error",
              "code": 400,
              "message": "Bad Request",
              "validationErrors": [
                {
                  "message": "Path `huntKey` is required.",
                  "field": "huntKey"
                }
              ]
            }

+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


+ Response 404

            {
              "status": "Error",
              "code": 404,
              "message": "Not Found"
            }


### DELETE
Delete users account. Can be done by `root` user only.

+ Response 200

            {
              "status":"Deleted",
              "code": 200
            }

+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }

+ Response 403

            {
              "status": "Error",
              "code": 403,
              "message": "Forbidden"
            }


+ Response 404

            {
              "status": "Error",
              "code": 404,
              "message": "Not Found"
            }

## GET /api/v1/user/myself
Get my profile, redirects to my profile

+ Response 302

    + Headers

            Location: /api/v1/user/56435beda9c62b730b28f339


+ Response 401

            {
              "status": "Error",
              "code": 401,
              "message": "Unauthorized"
            }